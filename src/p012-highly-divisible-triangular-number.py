import math

# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
#
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
#
# What is the value of the first triangle number to have over five hundred divisors?

class PrimeFactors:
    def __init__(self, maxPrimes=500):
        self.primes = []
        self.primeSieve(maxPrimes)

    def primeSieve(self, sieveSize):
        print('Generating primes until {}'.format(sieveSize))
        sieve = [True] * sieveSize
        sieve[0] = False # zero and one are not prime numbers
        sieve[1] = False

        for i in range(2, int(math.sqrt(sieveSize)) + 1):
            pointer = i * 2
            while pointer < sieveSize:
                sieve[pointer] = False
                pointer += i

        self.primes = []
        for i in range(sieveSize):
            if sieve[i] == True:
                self.primes.append(i)

        self.primes.sort()

    def getPrimeFactors(self, number):
        factors = []

#        print('number={}, self.primes[-1]={}, sqrt(num)={}'.format(number, self.primes[-1], math.sqrt(number)))
        if self.primes[-1] <= (number / 2) + 1:
            self.primeSieve(number * 2)

        while number > 1:
#            print('number={}, max prime={}, factors={}'.format(number, self.primes[-1], repr(factors)))
            for prime in self.primes:
                if number % prime == 0:
                    factors.append(prime)
                    number = number / prime
                    break

#        print(repr(factors))
        return factors

def countAllDivisors(factors):
    count = 1
    for p in set(factors):
        count *= (factors.count(p)+1)
    return count



def main():
    tri_num = 0
    divisors = 0
    highest = 0
    i = 1

    factorizer = PrimeFactors()

    while divisors <= 500:
        tri_num += i
        divisors = countAllDivisors(factorizer.getPrimeFactors(tri_num))
        print('The the {}th triangular number ({}) has {} divisors'.format(i, tri_num, divisors))
        i += 1

    print('The first triangular number that has more than 500 divisors is {}'.format(tri_num))

if __name__ == '__main__':
    main()

